name: One-Click Connect

on:
  workflow_dispatch:
    inputs:
      region:
        description: "Vultr region (e.g. nrt, sjc, lax, sgp)"
        required: false
        default: "nrt"
      plan:
        description: "Vultr plan (e.g. vc2-1c-1gb)"
        required: false
        default: "vc2-1c-1gb"
      snapshot_id:
        description: "Override snapshot id (optional, otherwise use secrets.SNAPSHOT_ID)"
        required: false
        default: ""
      client_name:
        description: "First client name"
        required: false
        default: "iphone"
      client_addr:
        description: "First client address (CIDR)"
        required: false
        default: "10.6.0.2/32"
      wg_port:
        description: "WireGuard UDP port"
        required: false
        default: "51820"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      SNAPSHOT_DEF: ${{ secrets.SNAPSHOT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Sanity check secrets
        run: |
          test -n "${VULTR_API_KEY}" || { echo "Missing VULTR_API_KEY"; exit 1; }
          test -n "${SSH_PRIVATE_KEY}" || { echo "Missing SSH_PRIVATE_KEY"; exit 1; }
          test -n "${SSH_PUBLIC_KEY}"  || { echo "Missing SSH_PUBLIC_KEY";  exit 1; }
          SNAP="${{ inputs.snapshot_id }}"
          if [ -z "$SNAP" ]; then SNAP="$SNAPSHOT_DEF"; fi
          test -n "$SNAP" || { echo "Missing snapshot_id and secrets.SNAPSHOT_ID"; exit 1; }
          echo "SNAPSHOT_ID resolved."

      - name: Prepare SSH key
        run: |
          mkdir -p ~/.ssh
          printf "%s\n" "${SSH_PRIVATE_KEY}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      - name: Compose user_data (inline from repo script)
        id: ud
        run: |
          # inject runtime overrides via header
          REGION="${{ inputs.region }}"
          PLAN="${{ inputs.plan }}"
          CLIENT_NAME="${{ inputs.client_name }}"
          CLIENT_ADDR="${{ inputs.client_addr }}"
          WG_PORT="${{ inputs.wg_port }}"
          SNAP="${{ inputs.snapshot_id }}"
          if [ -z "$SNAP" ]; then SNAP="${SNAPSHOT_DEF}"; fi

          # read user-data.sh and prepend runtime vars block
          printf '#!/bin/bash\nWG_PORT="%s"\nCLIENT_NAME="%s"\nCLIENT_ADDR="%s"\n' \
            "$WG_PORT" "$CLIENT_NAME" "$CLIENT_ADDR" > ud.sh
          cat server/cloudinit/user-data.sh >> ud.sh

          # store to GITHUB_OUTPUT as a single-line string (no secrets inside)
          # use jq @json to escape correctly for JSON body later
          esc=$(jq -Rs . < ud.sh)
          echo "body=${esc}" >> "$GITHUB_OUTPUT"

      - name: Create instance on Vultr from snapshot
        id: create
        env:
          SNAPSHOT_DEF: ${{ secrets.SNAPSHOT_ID }}
        run: |
          REGION="${{ inputs.region }}"
          PLAN="${{ inputs.plan }}"
          SNAP="${{ inputs.snapshot_id }}"
          if [ -z "$SNAP" ]; then SNAP="${SNAPSHOT_DEF}"; fi

          # build payload
          cat > payload.json <<EOF
          {
            "region": "$REGION",
            "plan": "$PLAN",
            "snapshot_id": "$SNAP",
            "label": "privatetunnel-oc",
            "user_data": $(echo '${{ steps.ud.outputs.body }}'),
            "backups": "disabled",
            "enable_ipv6": true
          }
          EOF

          # create instance
          set -e
          RES=$(curl --fail-with-body -sS -X POST https://api.vultr.com/v2/instances \
            -H "Authorization: Bearer ${VULTR_API_KEY}" \
            -H "Content-Type: application/json" \
            --data-binary @payload.json)
          echo "$RES" | jq .
          ID=$(echo "$RES" | jq -r '.instance.id')
          test -n "$ID" || { echo "No instance id returned"; exit 1; }
          echo "id=$ID" >> "$GITHUB_OUTPUT"

      - name: Wait instance active & fetch IPv4
        id: ip
        run: |
          ID="${{ steps.create.outputs.id }}"
          for i in $(seq 1 60); do
            RES=$(curl -sS -H "Authorization: Bearer ${VULTR_API_KEY}" https://api.vultr.com/v2/instances/${ID})
            STATUS=$(echo "$RES" | jq -r '.instance.status')
            IP=$(echo "$RES" | jq -r '.instance.main_ip')
            echo "status=$STATUS ip=$IP"
            if [ "$STATUS" = "active" ] && [ "$IP" != "null" ] && [ -n "$IP" ]; then
              echo "ip=$IP" >> "$GITHUB_OUTPUT"
              exit 0
            fi
            sleep 10
          done
          echo "Instance not ready in time"; exit 1

      - name: Wait SSH ready
        run: |
          bash scripts/wait_for_ssh.sh ${{ steps.ip.outputs.ip }} 600

      - name: Push SSH public key to authorized_keys (fallback)
        run: |
          IP=${{ steps.ip.outputs.ip }}
          ssh -o StrictHostKeyChecking=no root@$IP "mkdir -p ~/.ssh && chmod 700 ~/.ssh && echo '${SSH_PUBLIC_KEY}' >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys" || true

      - name: Poll for artifacts on server
        run: |
          IP=${{ steps.ip.outputs.ip }}
          NAME="${{ inputs.client_name }}"
          for i in $(seq 1 60); do
            ssh -o StrictHostKeyChecking=no root@$IP "test -s /root/${NAME}.png -a -s /root/${NAME}.conf" && break
            echo "waiting artifacts... ($i)"
            sleep 10
          done
          ssh -o StrictHostKeyChecking=no root@$IP "ls -l /root/${NAME}.png /root/${NAME}.conf"

      - name: Download artifacts
        run: |
          IP=${{ steps.ip.outputs.ip }}
          NAME="${{ inputs.client_name }}"
          scp -o StrictHostKeyChecking=no root@$IP:/root/${NAME}.png .
          scp -o StrictHostKeyChecking=no root@$IP:/root/${NAME}.conf .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wg-client-${{ steps.ip.outputs.ip }}-${{ inputs.client_name }}
          path: |
            ./${{ inputs.client_name }}.png
            ./${{ inputs.client_name }}.conf

      - name: Summary
        run: |
          IP=${{ steps.ip.outputs.ip }}
          cat <<MD >> $GITHUB_STEP_SUMMARY
          ## One-Click Connect
          - **Instance IP:** \`${IP}\`
          - **WG Port:** \`${{ inputs.wg_port }}\`
          - **Artifacts:** QR PNG + client conf 已上传  
          - **Next:** 在 iPhone 的 WireGuard App 扫描下载的 PNG 即可连接
          MD
