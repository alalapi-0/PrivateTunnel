name: One-Click Connect

on:
  workflow_dispatch:
    inputs:
      region:
        description: Vultr region slug (e.g. nrt, sjc)
        required: false
        default: nrt
      plan:
        description: Vultr plan (e.g. vc2-1c-1gb)
        required: false
        default: vc2-1c-1gb
      snapshot_id:
        description: Override snapshot ID (defaults to secrets.SNAPSHOT_ID)
        required: false
        default: ''
      client_name:
        description: WireGuard client name
        required: false
        default: iphone
      client_addr:
        description: WireGuard client address (CIDR)
        required: false
        default: 10.6.0.2/32
      wg_port:
        description: WireGuard UDP port
        required: false
        default: '51820'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VULTR_API_KEY: ${{ secrets.VULTR_API_KEY }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate inputs
        id: validate
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${VULTR_API_KEY:-}" ]; then
            echo "❌ Missing VULTR_API_KEY secret" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          if [ -z "${SSH_PRIVATE_KEY:-}" ] || [ -z "${SSH_PUBLIC_KEY:-}" ]; then
            echo "❌ Missing SSH key pair secrets" >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          snapshot_input="${{ github.event.inputs.snapshot_id }}"
          snapshot_secret="${{ secrets.SNAPSHOT_ID }}"
          snapshot_id="$snapshot_input"
          if [ -z "$snapshot_id" ]; then
            snapshot_id="$snapshot_secret"
          fi
          if [ -z "$snapshot_id" ]; then
            {
              echo "### Snapshot ID required"
              echo "未检测到 snapshot_id 输入或 secrets.SNAPSHOT_ID。"
              echo "请在仓库 Secrets 中设置 SNAPSHOT_ID 或在手动触发时填写 snapshot_id。"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          region_input="${{ github.event.inputs.region }}"
          plan_input="${{ github.event.inputs.plan }}"
          client_name_input="${{ github.event.inputs.client_name }}"
          client_addr_input="${{ github.event.inputs.client_addr }}"
          wg_port_input="${{ github.event.inputs.wg_port }}"
          if [ -z "$region_input" ]; then region_input="nrt"; fi
          if [ -z "$plan_input" ]; then plan_input="vc2-1c-1gb"; fi
          if [ -z "$client_name_input" ]; then client_name_input="iphone"; fi
          if [ -z "$client_addr_input" ]; then client_addr_input="10.6.0.2/32"; fi
          if [ -z "$wg_port_input" ]; then wg_port_input="51820"; fi
          echo "SNAPSHOT_ID=$snapshot_id" >> "$GITHUB_ENV"
          echo "REGION=$region_input" >> "$GITHUB_ENV"
          echo "PLAN=$plan_input" >> "$GITHUB_ENV"
          echo "CLIENT_NAME=$client_name_input" >> "$GITHUB_ENV"
          echo "CLIENT_ADDR=$client_addr_input" >> "$GITHUB_ENV"
          echo "WG_PORT=$wg_port_input" >> "$GITHUB_ENV"
          echo "WG_IFNAME=wg0" >> "$GITHUB_ENV"

      - name: Prepare SSH key material
        shell: bash
        run: |
          set -euo pipefail
          install -d -m 700 ~/.ssh
          printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          printf '%s\n' "$SSH_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
          chmod 644 ~/.ssh/id_ed25519.pub
          cat <<'CFG' > ~/.ssh/config
Host *
  StrictHostKeyChecking no
  UserKnownHostsFile /dev/null
  IdentitiesOnly yes
  IdentityFile ~/.ssh/id_ed25519
CFG
          chmod 600 ~/.ssh/config

      - name: Ensure Vultr SSH key
        id: sshkey
        shell: bash
        run: |
          set -euo pipefail
          KEY_NAME="privatetunnel-oneclick"
          LIST_JSON="$(mktemp)"
          curl --silent --show-error --fail-with-body \
            -H "Authorization: Bearer $VULTR_API_KEY" \
            https://api.vultr.com/v2/ssh-keys > "$LIST_JSON"
          KEY_ID=$(jq -r --arg name "$KEY_NAME" '.ssh_keys[] | select(.name==$name) | .id' "$LIST_JSON" | head -n1)
          SSH_KEY_FILE="$(mktemp)"
          printf '%s\n' "$SSH_PUBLIC_KEY" > "$SSH_KEY_FILE"
          if [ -n "$KEY_ID" ] && [ "$KEY_ID" != "null" ]; then
            jq -n --rawfile ssh_key "$SSH_KEY_FILE" '{ssh_key:$ssh_key}' > payload.json
            curl --silent --show-error --fail-with-body \
              -X PATCH \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              -H "Content-Type: application/json" \
              -d @payload.json \
              https://api.vultr.com/v2/ssh-keys/$KEY_ID >/dev/null
          else
            jq -n --arg name "$KEY_NAME" --rawfile ssh_key "$SSH_KEY_FILE" '{name:$name, ssh_key:$ssh_key}' > payload.json
            KEY_ID=$(curl --silent --show-error --fail-with-body \
              -X POST \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              -H "Content-Type: application/json" \
              -d @payload.json \
              https://api.vultr.com/v2/ssh-keys | jq -r '.ssh_key.id')
          fi
          if [ -z "$KEY_ID" ] || [ "$KEY_ID" = "null" ]; then
            echo "Failed to provision SSH key" >&2
            exit 1
          fi
          rm -f payload.json "$SSH_KEY_FILE" "$LIST_JSON"
          echo "SSH_KEY_ID=$KEY_ID" >> "$GITHUB_ENV"

      - name: Render user data
        id: userdata
        shell: bash
        run: |
          set -euo pipefail
          header="$(mktemp)"
          {
            echo "#!/bin/bash"
            printf 'export WG_PORT=%q\n' "$WG_PORT"
            printf 'export CLIENT_NAME=%q\n' "$CLIENT_NAME"
            printf 'export CLIENT_ADDR=%q\n' "$CLIENT_ADDR"
            printf 'export AUTHORIZED_SSH_PUBKEY=%q\n' "$SSH_PUBLIC_KEY"
          } > "$header"
          tail -n +2 server/cloudinit/user-data.sh >> "$header"
          mv "$header" user-data.rendered.sh

      - name: Generate payload
        shell: bash
        run: |
          set -euo pipefail
          LABEL="oneclick-${GITHUB_RUN_ID}-${GITHUB_RUN_ATTEMPT}"
          jq -n \
            --arg region "$REGION" \
            --arg plan "$PLAN" \
            --arg snapshot_id "$SNAPSHOT_ID" \
            --arg label "$LABEL" \
            --arg sshkey "$SSH_KEY_ID" \
            --rawfile user_data user-data.rendered.sh \
            '{region:$region, plan:$plan, snapshot_id:$snapshot_id, label:$label, enable_ipv6:false, backups:"disabled", user_data:$user_data, sshkey_id:[$sshkey]}' > payload.json

      - name: Create instance
        id: create
        shell: bash
        run: |
          set -euo pipefail
          RESPONSE="$(mktemp)"
          curl --silent --show-error --fail-with-body \
            -X POST \
            -H "Authorization: Bearer $VULTR_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            https://api.vultr.com/v2/instances > "$RESPONSE"
          INSTANCE_ID=$(jq -r '.instance.id' "$RESPONSE")
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" = "null" ]; then
            echo "Failed to create instance" >&2
            cat "$RESPONSE" >&2
            exit 1
          fi
          echo "INSTANCE_ID=$INSTANCE_ID" >> "$GITHUB_ENV"

      - name: Wait for instance activation
        id: wait-instance
        shell: bash
        run: |
          set -euo pipefail
          for attempt in $(seq 1 30); do
            INFO="$(mktemp)"
            curl --silent --show-error --fail-with-body \
              -H "Authorization: Bearer $VULTR_API_KEY" \
              https://api.vultr.com/v2/instances/$INSTANCE_ID > "$INFO"
            STATUS=$(jq -r '.instance.status' "$INFO")
            IP=$(jq -r '.instance.main_ip' "$INFO")
            if [ "$STATUS" = "active" ] && [ -n "$IP" ] && [ "$IP" != "null" ]; then
              INSTANCE_IP="$IP"
              echo "INSTANCE_IP=$IP" >> "$GITHUB_ENV"
              break
            fi
            sleep 10
          done
          if [ -z "${INSTANCE_IP:-}" ]; then
            echo "Instance did not become active in time" >&2
            exit 1
          fi

      - name: Wait for SSH availability
        shell: bash
        run: |
          set -euo pipefail
          scripts/wait_for_ssh.sh "root@${INSTANCE_IP}" 600

      - name: Wait for WireGuard artifacts
        shell: bash
        run: |
          set -euo pipefail
          for attempt in $(seq 1 30); do
            if ssh -o BatchMode=yes root@"$INSTANCE_IP" "test -s /root/${CLIENT_NAME}.png && test -s /root/${CLIENT_NAME}.conf"; then
              exit 0
            fi
            sleep 10
          done
          echo "Timed out waiting for WireGuard client artifacts" >&2
          exit 1

      - name: Download artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p artifacts
          scp root@"$INSTANCE_IP":/root/${CLIENT_NAME}.png artifacts/
          scp root@"$INSTANCE_IP":/root/${CLIENT_NAME}.conf artifacts/

      - name: Collect diagnostics
        id: diagnostics
        shell: bash
        run: |
          set -euo pipefail
          WG_DUMP=$(ssh root@"$INSTANCE_IP" "wg show ${WG_IFNAME}" || true)
          if [ -z "$WG_DUMP" ]; then
            WG_DUMP="(wg show returned empty)"
          fi
          PORT_CHECK=$(ssh root@"$INSTANCE_IP" "ss -lun | grep :$WG_PORT" || true)
          if [ -z "$PORT_CHECK" ]; then
            PORT_CHECK="(ss -lun did not report :$WG_PORT)"
          fi
          echo "WG_PEERS<<'EOF'" >> "$GITHUB_OUTPUT"
          echo "$WG_DUMP" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          echo "PORT_LISTEN<<'EOF'" >> "$GITHUB_OUTPUT"
          echo "$PORT_CHECK" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oneclick-${{ env.INSTANCE_IP }}-${{ github.run_id }}
          path: artifacts
          if-no-files-found: error

      - name: Publish summary
        shell: bash
        run: |
          set -euo pipefail
          ARTIFACT_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          {
            echo "## One-Click Connect Result"
            echo "- Instance ID: ${INSTANCE_ID}"
            echo "- Public IPv4: ${INSTANCE_IP}"
            echo "- WireGuard Port: ${WG_PORT}/udp"
            echo "- Client files: ${CLIENT_NAME}.png / ${CLIENT_NAME}.conf (artifact, generated at /root/${CLIENT_NAME}.png)"
            echo "- Artifact download: [Actions run](${ARTIFACT_URL})"
            echo ""
            echo "### wg show peers"
            echo '```'
            echo "${{ steps.diagnostics.outputs.WG_PEERS }}"
            echo '```'
            echo ""
            echo "### ss -lun | grep :${WG_PORT}"
            echo '```'
            echo "${{ steps.diagnostics.outputs.PORT_LISTEN }}"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"
